// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_mbgd_lm
Rcpp::List rcpp_mbgd_lm(arma::mat X, arma::vec y, arma::vec beta_init, double eps, bool backtrack, double step_size, int max_iter, double alpha, double backtracking_beta, int batch_size);
RcppExport SEXP _bgd_rcpp_mbgd_lm(SEXP XSEXP, SEXP ySEXP, SEXP beta_initSEXP, SEXP epsSEXP, SEXP backtrackSEXP, SEXP step_sizeSEXP, SEXP max_iterSEXP, SEXP alphaSEXP, SEXP backtracking_betaSEXP, SEXP batch_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type backtrack(backtrackSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type backtracking_beta(backtracking_betaSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mbgd_lm(X, y, beta_init, eps, backtrack, step_size, max_iter, alpha, backtracking_beta, batch_size));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_Momentum_lm
Rcpp::List rcpp_Momentum_lm(arma::mat X, arma::vec y, arma::vec beta_init, double eps, bool backtrack, double step_size, int max_iter, double alpha, double backtracking_beta, int batch_size, double rho);
RcppExport SEXP _bgd_rcpp_Momentum_lm(SEXP XSEXP, SEXP ySEXP, SEXP beta_initSEXP, SEXP epsSEXP, SEXP backtrackSEXP, SEXP step_sizeSEXP, SEXP max_iterSEXP, SEXP alphaSEXP, SEXP backtracking_betaSEXP, SEXP batch_sizeSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type backtrack(backtrackSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type backtracking_beta(backtracking_betaSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_Momentum_lm(X, y, beta_init, eps, backtrack, step_size, max_iter, alpha, backtracking_beta, batch_size, rho));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bgd_rcpp_mbgd_lm", (DL_FUNC) &_bgd_rcpp_mbgd_lm, 10},
    {"_bgd_rcpp_Momentum_lm", (DL_FUNC) &_bgd_rcpp_Momentum_lm, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_bgd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
